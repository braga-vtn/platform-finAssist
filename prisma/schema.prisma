generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivationKey {
  id        Int       @id @default(autoincrement())
  rescued   Boolean   @default(false)
  secretKey String    @unique
  email     String?
  rescuedAt DateTime?
  createdAt DateTime  @default(now())
}

model User {
  id           Int            @id @default(autoincrement())
  clerkId      String         @unique @default(uuid())
  avatar       String?
  name         String
  email        String         @unique
  password     String
  parent       String?
  register     String?
  address      String?
  neighborhood String?
  city         String?
  uf           String?
  zipcode      String?
  parentId     String         @unique @default(uuid())
  updatedAt    DateTime       @default(now()) @updatedAt
  createdAt    DateTime       @default(now())
  Clients      Clients[]
  Team         Team[]
  Invoices     Invoices[]
  Integrations Integrations[]
  Messages     Messages[]
  Token        Token[]
}

model Clients {
  id             Int        @id @default(autoincrement())
  identifier     String // Número de Cliente - manual
  name           String // Nome da Empresa
  register       String // CNPJ/CPF
  city           String
  uf             String
  zipcode        String
  neighborhood   String
  address        String
  value          Int // Valor das parcelas
  email          String
  phone          String
  SendByWhatsapp Boolean    @default(true)
  SendByEmail    Boolean    @default(true)
  observation    String?
  memberId       String // clerkId de quem criou o cliente
  dueAt          DateTime
  updatedAt      DateTime   @default(now()) @updatedAt
  createdAt      DateTime   @default(now())
  userId         String
  User           User       @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  Invoices       Invoices[]
}

model Team {
  id            String   @id @default(uuid())
  parentId      String // parentId de quem convidou
  avatar        String?
  name          String
  email         String
  avatarCompany String? // avatar da conta de quem convidou
  nameCompany   String // nome da conta de quem convidou
  ownerId       String // clerkId de quem convidou
  updatedAt     DateTime @default(now()) @updatedAt
  createdAt     DateTime @default(now())
  memberId      String // clerkId do convidado
  Member        User     @relation(fields: [memberId], references: [clerkId], onDelete: Cascade)
}

enum TokenType {
  refresh
  team
  register
}

model Token {
  id        Int       @id @default(autoincrement())
  type      TokenType
  token     String    @unique
  payload   Json? //avatar*, name, email, permissions, parentId (de quem convidou) and role
  expires   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String // userId do convidado
  User      User      @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
}

enum InvoicesStatus {
  paid
  pending
  canceled
}

model Invoices {
  id         String         @id @default(uuid())
  externalId String         @unique // inter
  identifier String
  status     InvoicesStatus
  value      Int
  payload    Json
  fileUrl    String?
  pixCode    String?
  dueAt      DateTime
  updatedAt  DateTime       @default(now()) @updatedAt
  createdAt  DateTime       @default(now())
  userId     String
  clientId   Int
  User       User           @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  Clients    Clients        @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

enum IntegrationType {
  inter
  whatsapp
  email
}

model Integrations {
  id        Int             @id @default(autoincrement())
  type      IntegrationType
  config    Json
  expiresAt DateTime?
  updatedAt DateTime        @default(now()) @updatedAt
  createdAt DateTime        @default(now())
  userId    String
  User      User            @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
}

enum MessageType {
  whatsapp
  email
}

model Messages {
  id        Int         @id @default(autoincrement())
  type      MessageType
  payload   Json
  createdAt DateTime    @default(now())
  userId    String
  User      User        @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
}
